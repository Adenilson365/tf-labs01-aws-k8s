name: Terraform destroy
on:
  workflow_dispatch:
jobs:
  terraform_destroy: 
    name: Terraform destroy ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    environment: ${{ github.ref_name == 'main' && 'prod' || 'dev' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Reposit√≥rio
        uses: actions/checkout@v4
      
      - name: Configurar AWS credentials CLI de Deploy
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-region: ${{ vars.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEPLOY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEPLOY }}

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3

      - name: Terraform init
        run: |
          terraform init \
           -backend-config="bucket=${{ secrets.BUCKET_NAME_STATE }}" \
           -backend-config="key=${{ vars.STATE_KEY }}" \
           -backend-config="dynamodb_table=${{ vars.DYNAMO_TABLE_LOCK }}"   \
           -backend-config="region=${{ vars.AWS_REGION }}" \


      - name: Terraform Plan
        run: |
          export TF_VAR_aws_profile="${{ secrets.AWS_CLUSTER_USER }}"
          export TF_VAR_db_password="${{ secrets.DB_PASSWORD }}"
          export TF_VAR_db_username="${{ secrets.DB_USER }}"
          export TF_VAR_key_name="${{ secrets.EC2_KEY_NAME }}"
          export TF_VAR_principal_arn="${{ secrets.AWS_PRINCIPAL_ARN }}"
          terraform destroy --auto-approve -var-file ./env/${{ vars.ENV_DEPLOY }}/${{ vars.ENV_DEPLOY }}.tfvars




          

          
          

   
          
